// Mocks generated by Mockito 5.4.6 from annotations
// in device_sensor_info/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:device_sensor_info/domain/entities/device_info.dart' as _i3;
import 'package:device_sensor_info/domain/repositories/device_info_repository.dart'
    as _i2;
import 'package:device_sensor_info/domain/usecases/get_device_info_usecase.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDeviceInfoRepository_0 extends _i1.SmartFake
    implements _i2.DeviceInfoRepository {
  _FakeDeviceInfoRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeviceInfo_1 extends _i1.SmartFake implements _i3.DeviceInfo {
  _FakeDeviceInfo_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetDeviceInfoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetDeviceInfoUseCase extends _i1.Mock
    implements _i4.GetDeviceInfoUseCase {
  MockGetDeviceInfoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DeviceInfoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeDeviceInfoRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.DeviceInfoRepository);

  @override
  _i5.Future<_i3.DeviceInfo> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<_i3.DeviceInfo>.value(
              _FakeDeviceInfo_1(this, Invocation.method(#call, [])),
            ),
          )
          as _i5.Future<_i3.DeviceInfo>);
}
